generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Topic {
  id        String   @id @default(cuid())
  title     String
  shortDesc String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  topicId   String
  Topic     Topic    @relation(fields: [topicId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
  userId    String

  @@index([topicId])
  @@index([userId])
}

enum Role {
  USER
  ADMIN //Can Edit Characters and Content
  SUPERADMIN // Can View and Edit all content
  SPELLWRIGHT // Can Edit Spells and other items
  MODERATOR // Can Edit Posts and Topics
}

model User {
  id                String      @id @default(cuid())
  name              String?
  email             String?     @unique
  emailVerified     DateTime?
  username          String?     @unique
  image             String?
  UnallocatedLevels Int         @default(0)
  UnrequestedSkills Int         @default(0)
  role              Role        @default(USER)
  accounts          Account[]
  sessions          Session[]
  characters        Character[]
  request           Request[]
  posts             Post[]
}

model Skill {
  id                   String      @id @default(cuid())
  title                String
  description          String?     @db.Text
  descriptionShort     String?     @db.Text
  tier                 Int
  parentSkillId        String?
  skillGroupId         String?
  prerequisiteSkills   Json?
  permenentEpReduction Int
  epCost               String
  activation           String
  duration             String
  abilityCheck         String?
  canBeTakenMultiple   Boolean     @default(false)
  playerVisable        Boolean     @default(true)
  additionalInfo       Json?
  chararacterId        String?
  parentSkill          Skill?      @relation("RelatedSkills", fields: [parentSkillId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childSkills          Skill[]     @relation("RelatedSkills")
  skillGrouping        SkillGroup? @relation(fields: [skillGroupId], references: [id])
  characterSkills      Character?  @relation(fields: [chararacterId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([skillGroupId])
  @@index([parentSkillId])
  @@index([chararacterId])
}

model SkillGroup {
  id          String  @id @default(cuid())
  title       String
  description String?
  skills      Skill[]
}

model Class {
  id                  String      @id @default(cuid())
  Title               String
  description         String      @db.Text
  grantedSkills       Json?
  Skills              Json?
  SkillTierGains      Json?
  HP                  Json?
  EP                  Json?
  Attack              Json?
  Accuracy            Json?
  Defense             Json?
  Resistance          Json?
  Tough               Json?
  Quick               Json?
  Mind                Json?
  primaryCharacters   Character[] @relation("PrimaryClass")
  secondaryCharacters Character[] @relation("SecondaryClass")

  @@index([Title])
}

model Character {
  id                String   @id @default(cuid())
  name              String
  userId            String?
  primaryClassId    String?
  primaryClassLvl   Int
  secondaryClassId  String?
  secondaryClassLvl Int
  Attributes        Json?
  notes             Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  phazians          Int
  user              User?    @relation(fields: [userId], references: [id])
  primaryClass      Class?   @relation("PrimaryClass", fields: [primaryClassId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  secondaryClass    Class?   @relation("SecondaryClass", fields: [secondaryClassId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  skills            Skill[]
  inventory         Item[]
  spells            Spell[]
  events            Event[]

  @@index([userId])
  @@index([primaryClassId])
  @@index([secondaryClassId])
}

model Event {
  id          String      @id @default(cuid())
  title       String
  description String?
  date        DateTime
  location    String?
  characters  Character[]
}

model Item {
  id          String     @id @default(cuid())
  title       String
  description String?
  type        ItemType?
  quantity    Int
  characterId String?
  character   Character? @relation(fields: [characterId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([characterId])
}

model Spell {
  id          String     @id @default(cuid())
  title       String
  type        SpellType?
  description String?
  level       Int
  characterId String?
  character   Character? @relation(fields: [characterId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([characterId])
}

model Request {
  id          String       @id @default(cuid())
  title       String
  description String?
  userId      String?
  type        RequestType?
  User        User?        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId])
}

model CharacterToEvent {
  A String
  B String

  @@unique([A, B], map: "_CharacterToEvent_AB_unique")
  @@index([B], map: "_CharacterToEvent_B_index")
  @@map("_CharacterToEvent")
}

enum ItemType {
  WEAPON
  ARMOR
  CONSUMABLE
  MISC
  MAGIC_ITEM
  INCARNATE_ITEM
}

enum SpellType {
  PSION
  DRUID
  WIZARD
  CLERIC
}

enum RequestType {
  SKILL
  SPELL
  CHARACTER
  OTHER
}
